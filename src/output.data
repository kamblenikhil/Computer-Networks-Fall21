Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.Here the address stored in the start pointer is assigned to the ptr pointer, now the start pointer is empty as the address stored in it is assigned to ptr pointer, now in the second statement of else block, the address of the next node is assigned to the start pointer, in third the statement, we deleted the ptr pointer as it stores the address of the first node which we want to delete.
Deleting node from the middle of the list
If the length of the linked list is odd then delete (( n+1)/2)th term of the linked list and if the list is
of even length then delete the (n/2+1)th term of the linked list.
To delete a the middle note we have to follow some points:
Let two pointers namely ptr1 and ptr2.
Each time increment ptr1 by 1 and ptr2 by 2.
Repeat step 2 until ptr2 goes to the end of the linked list.
When ptr2 is at the end of the list, at the same time ptr1 will be at the middle of the list.
Then delete the middle node,i.e. ptr1.
